{"version":3,"sources":["component/weather_component.js","component/form_component.js","App.js","serviceWorker.js","index.js"],"names":["minmaxTemp","min","max","className","Weather","city","celsius","country","max_temp","min_temp","description","icon","Form","loadWeather","err","role","onSubmit","type","name","autoComplete","placeholder","style","fontSize","color","App","getWeather","e","preventDefault","target","elements","value","fetch","then","res","json","info","setState","sys","calCelsius","main","temp","temp_max","temp_min","weather","error","get_weather_icon","weathericon","id","state","undefined","Thunderstorm","Clear","Rain","Drizzle","Snow","Atmosphere","Clouds","Math","floor","icons","rangeId","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.995b3cb6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n/*display-1 is for increasing the size of the icon\r\npt-4 means padding top*/\r\n const Weather=({city,country,celsius,max_temp,min_temp,description,icon})=>{\r\n \treturn(\r\n \t\t<div className=\"container text-light\">\r\n \t\t    <div className=\"cards pt-4\">\r\n               <h1>{city}</h1>\r\n               <h5 className=\"pv4\">\r\n                  <i className={`wi ${icon} display-1`} />\r\n               </h5>\r\n               {celsius?(<h1 className=\"pv2\">{celsius}&deg;</h1>):null}\r\n               {minmaxTemp(min_temp,max_temp)}\r\n               <h2 className=\"pv3\">{description}</h2>\r\n \t\t    </div>\r\n        </div>\r\n \t\t); \r\n };\r\n const minmaxTemp=(min,max)=>\r\n {\r\n \tif(min && max)\r\n \t{\r\n \treturn(\r\n \t\t<h1>\r\n \t\t   <span className=\"ph4\">{min}&deg;</span>\r\n \t\t   <span className=\"ph4\">{max}&deg;</span>\r\n \t\t</h1>\r\n\r\n \t\t);\r\n \t}\r\n };\r\n\r\n export default Weather;","import React from 'react';\r\nimport './form_component.css';\r\n/*mx means left right margin and my is top bottom margin*/\r\nconst Form=({loadWeather,err})=>{\r\n\treturn(\r\n\t\t<div className=\"container\">\r\n\t\t   <div>{err?error():null}</div>\r\n\t\t  <form onSubmit={loadWeather}>\r\n\t\t  <div className=\"row\">\r\n\t\t   <div className=\"col-md-3\">\r\n\t\t     <input type=\"text\" className=\"form-control\" name=\"city\" autoComplete=\"off\" placeholder=\"City\"/>\r\n\t\t   </div>\r\n\t\t   <div className=\"col-md-3\">\r\n\t\t     <input type=\"text\" className=\"form-control\" name=\"country\" autoComplete=\"off\" placeholder=\"Country\"/>\r\n\t\t   </div>\r\n\t\t   <div className=\"col-md-3\">\r\n\t\t     <button style={{fontSize:\"x-large\", color:\"white\"}}className=\"btn btn-warning\">Get Weather</button>\r\n\t\t   </div>\r\n\t\t  </div>\r\n\t\t  </form>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nfunction error(){\r\n\treturn(\r\n\t\t<div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n\t\t    Please Enter City and Country\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Form;","import React,{ Component } from 'react';\nimport Weather from './component/weather_component.js';\nimport Form from './component/form_component.js';\nimport './App.css';\nimport 'weather-icons/css/weather-icons.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n/*\nfor weather icons which are there in the github folder which is downloaded \nto use all the bootstrap css classes\n*/\n\nconst API_Key=\"3ae09c3fb3b427141de10ddab2b0f090\";\n\nclass App extends Component\n{\n  constructor()\n  {\n    super();\n    this.state={\n      city:'',\n      country:'',\n      icon:undefined,\n      celsius:'',\n      max_temp:'',\n      min_temp:'',\n      description:'',\n      error:false\n   };\n    \n    this.weathericon={\n      Thunderstorm:\"wi-thunderstorm\",\n      Clear:\"wi-day-sunny\",\n      Rain:\"wi-storm-showers\",\n      Drizzle:\"wi-sleet\",\n      Snow:\"wi-snow\",\n      Atmosphere:\"wi-fog\",\n      Clouds:\"wi-day-fog\"\n\n    };\n  }\n  \n   calCelsius(temp)\n   {\n     let cel=Math.floor(temp-273.15);\n     return cel;\n   }\n  \n  get_weather_icon(icons,rangeId)\n  {\n    switch(true)\n    {\n      case rangeId>=200 && rangeId<=232:\n        this.setState({icon:icons.Thunderstorm});\n        break;\n      case rangeId>=300 && rangeId<=321:\n        this.setState({icon:icons.Drizzle});\n        break;\n      case rangeId>=500 && rangeId<=531:\n        this.setState({icon:icons.Rain});\n        break;\n      case rangeId>=600 && rangeId<=622:\n        this.setState({icon:icons.Snow});\n        break;\n      case rangeId>=701 && rangeId<=781:\n        this.setState({icon:icons.Atmosphere});\n        break;\n      case rangeId===800:\n        this.setState({icon:icons.Clear});\n        break;\n      case rangeId>=801 && rangeId<=804:\n        this.setState({icon:icons.Clouds});\n        break;\n      default:\n        this.setState({icon:icons.Clouds});\n    }\n  }\n\n  getWeather=(e)=>{\n\n     e.preventDefault();\n     const city=e.target.elements.city.value;\n     const country=e.target.elements.country.value;\n\n     if(city && country)\n     {\n     fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_Key}`)\n    .then(res=>res.json())\n    .then(info=>\n    {\n      return(\n        this.setState({\n      city:`${info.name},${info.sys.country}`,\n      celsius:this.calCelsius(info.main.temp),\n      max_temp:this.calCelsius(info.main.temp_max),\n      min_temp:this.calCelsius(info.main.temp_min),\n      description:info.weather[0].description,\n      error:false\n       }),\n    this.get_weather_icon(this.weathericon,info.weather[0].id)\n    )\n    });\n  }\n  else\n  {\n    this.setState({error:true});\n  }\n\n    \n  }\n\n  render()\n  {\n    const {city,celsius,max_temp,min_temp,description,icon}=this.state;\n    return(\n      <div  className=\"App\">\n        <Form loadWeather={this.getWeather} err={this.state.error}/>\n        <Weather \n          city={city} \n          celsius={celsius} \n          max_temp={max_temp} \n          min_temp={min_temp} \n          description={description}\n          icon={icon}\n        />\n      </div>\n      );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n//reportWebVitals();\nReactDOM.render(<App />,document.getElementById('root'));\nserviceWorker.unregister();"],"sourceRoot":""}